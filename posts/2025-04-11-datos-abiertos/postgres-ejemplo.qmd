## Preparar Linux y PostgreSQL en tu m√°quina Windows

### WSL
Ahora Windows incluye la opci√≥n de habilitar una versi√≥n de linux virtual que convive con el ambiente Windows, la caracter√≠stica se denomina [*Windows Subsystem Linux* (**WSL**)](https://learn.microsoft.com/es-mx/windows/wsl/). Hay que habilitarlo desde el panel de control como *caracter√≠sticas de Windows* como se ilustra en la @fig-wsl, o mediante comandos desde una ventana de **Powershell** (ü™ü + X y luego I).

![Activar WSL desde el Panel de Control de Windows](images/wsl-activar.png){#fig-wsl width=60%}

\ 

```bash
wsl --install
wsl --version
wsl --install -d ubuntu
```
\ 

Habr√° ahora un √≠cono con el ping√ºino de Linux en tu equipo, que es un enlace a una ventana de terminal directamente asociada con **WSL**. M√°s adelante ser√° una forma de acceso conveniente, pero por lo pronto puedes seguir con la que ya tienes de **Powershell**.

![El ping√ºino de Linux debe andar por ah√≠ en tu equipo](images/wsl-icon.png){width=30%}

### PostgreSQL

Una vez activado **WSL**, tendr√°s, en este ejemplo, un *linux Ubuntu* en marcha. Ahora puedes instalar _PostgreSQL_ en esa m√°quina virtual. Lo primero es acceder a _linux_ mediante una consola de sistema. Bastar√° con que escribas `wsl` en **Powershell**. Puede ser la misma ventana que usaste para instalar todo, si todav√≠a la tienes abierta, o usar el nuevo √≠cono del ping√ºino. Ahora, escribe las siguientes instrucciones en _linux_. B√°sicamente le estas diciendo que entre en modo de _superusuario_ (`sudo`) y que vaya al servicio general de almacenamiento de aplicaciones (`apt-get`) y conseguir lo necesario para instalar _PostgreSQL_ en la versi√≥n que incluye extensiones y adiciones comunes al _PostgreSQL_ b√°sico.


``` bash
sudo apt-get install postgresql postgresql-contrib
```

La instalaci√≥n inicial de *PostgreSQL* utiliza como usuario de arranque a `postgres`. Es necesario darle un *password* para lograr que *PostgreSQL* nos de acceso. El siguiente comando lo hace. Te generar√° una l√≠nea en la que te pide ingreses la nueva clave que quieras darle al usuario `postgres`. Escribiras pero no ver√°s lo que escribes, por seguiridad obviamente. Al terminar aprieta la tecla **enter/intro/&#9166;**

``` bash
sudo passwd postgres
```

Ahora, desde la misma terminal, tenemos que arrancar a _posgtreSQL_  como un servico activo en el equipo. Esto lo mantendr√° en operaci√≥n hasta que reinicies la m√°quina, en cuyo caso deber√°s reiniciar el servicio.
La instrucci√≥n para hacer esta operaci√≥n es la siguiente.


``` bash
 sudo service postgresql start
```

Esta mismal√≠nea te sirve para detener el servico (stop en lugar de start), reiniciarlo (restart) o para averiguar si est√° activo (status).

Conviene generar un usuario de tu preferencia para interactuar con _PostgreSQL_, evitando dejar como vulnerabilidad la interacci√≥n atrav√©s del usuario com√∫n `postgres`. Para crear ese nuevo usuario usa el siguiente comando.

``` bash
sudo -u postgres psql

psql=# alter user <username> with encrypted password '<password>';
grant all privileges on database <dbname> to <username> ; 
```

Para iniciar tu interacci√≥n con *PostgreSQL* incialmente necesitar√° entrar a la interfaz del sistema con el siguiente comando. Puede ser que te presente alguna advertencia, pero por lo pronto no le hagas caso.

``` bash
sudo -u postgres createuser <username>
```

Para seguir con el ejercicio necesitamos crear una base de datos nueva. En este caso usaremos datos de ejemplo que ya se han organizado en bases de datos. Recurriremos al sitio del [programa Neon de los Estados Unidos](https://github.com/neondatabase-labs/postgres-sample-dbs).. Veamos la base de datos de los pasajeros del Titanic en su tr√°gico viaje inaugural. Lo primero es preparar a _PostgreSQL_ para alojarla.


``` bash
sudo -u postgres createdb titanic
```

Ahora vamos por la base de datos. En _linux_ existe para este fin el comando `wget`. Conviene preparar un directorio para poner estos datos de ejemplo. Un lugar posible podr√≠a ser dentro de tu directorio
**home**, (asocido al s√≠mbolo **) quiz√°s en _db-ejemplos_. Hay que usar `wget` con la opci√≥n **-P** seguida de la ruta deseada para almacenar el contenido de la URL. Si los directorios involucrados existen, los usa, si no, los crea.


``` bash
wget https://raw.githubusercontent.com/neondatabase/postgres-sample-dbs/main/titanic.sql -P ~/db-ejemplos
```

En Windows puedes verificar si el archivo solicitado fue cargado en el lugar que quer√≠a desde elnavegador de archivos, busca al final de la lista de directorios. Deber√≠a estar el ping√ºino ah√≠. lo abres y buscas la carpeta `home/<tu usuario>/db-ejemplo` en la forma usual. Ah√≠ deber√≠a estar el archivo `titanica.sql`.

Si ya todo est√° en orden, ahora hay que cargar los datos en la base de datos `titanic`. El comando para esto es este.

``` bash
psql -d titanic -f ~/db-ejemplos/titanic.sql
```

Si por falta de derechos de acceso en tu linux, falla algo de lo anterior, esta es la manera de darle todos los derechos al usuario. No siempre una buena idea desde el punto de vista de la seguridad. Lo primero es entrar a la consola de _PostgreSQL_ como un usuario administrativo, es decir `postgres`, por ejemplo. Nota el cambio en el encabezado de l√≠nea en tu terminal.

``` bash
sudo -u postgres psql
```

Ahora ya estas dentro de _PostgreSQL_ los comandos en su lenguaje, _SQL_, son los siguientes. Nota tambi√©n que cada comando es terminado con ";", si no lo incluyes el interprete de _SQL_ considera que no has terminado de construir la instrucci√≥n y por tanto no la procesa.

``` sql
alter user <username> with encrypted password '<password>';
grant all privileges on database <dbname> to <username> ; 
```

\ 
Para salir de _PostgreSQL_, usa el comando `\q`)
\ 


Una vez que todo ha sido configurado podr√°s tener acceso a _PostgreSQL_ y hacer operaciones de todo tipo. A continuaci√≥n un ejemplo muy sencillo con la bae de datos de ejemplo "titanic".

```{r}
pacman::p_load(RPostgres, keyring, flextable, DT, stringr, tibble)

# Sys.setenv(psql_eq_ip = "192.168.36.214",
#           psql_eq_port = "5432")

tryCatch({
  drv <- Postgres()
  print("Conectando con la base de datos‚Ä¶")
  connec <- dbConnect(drv, 
                      dbname   = "titanic",
                      host     = Sys.getenv("psql_eq_ip"), 
                      port     = Sys.getenv("psql_eq_port"),
                      user     = key_list("psql-eq")[1,2],
                      password = key_get(service = "psql-eq", 
                                         username = key_list("psql-eq")[1,2]))
  
  print("¬°Conexi√≥n exitosa!")
},
error=function(cond) {
  print(cond)
  print("<<<Conexi√≥n fallida>>>")
})

dbGetQuery(connec, "SELECT name, hometown FROM passenger;") |> 
  datatable() |> 
  head()

```

\ 
¬øHab√≠a alg√∫n mexicano en el Titanic? Por supuesto puedes ver esto en los datos que ya transferimos a una tabla en **R** arriba, pero para fines did√°cticos veamos como puedes hacer lo mismo directamente en _PostgreSQL_ con **SQL**. Usaremos el operador `ILIKE` que permite buscar patrones de caracteres sin distinguir entre may√∫sculas y min√∫sculas. Cosa que no hace el operado `LIKE`. [M√°s sobre este operador aqu√≠](https://docs.getdbt.com/sql-reference/ilike)

\ 

```{r}
dbGetQuery(connec, "SELECT name, hometown FROM passenger
                               WHERE hometown ILIKE '%mex%';") |> 
  flextable() |> 
  width(width = c(2,3)) |> 
  set_caption("Aqu√≠ est√° la respuesta")


```

\ 
Al terminar el procesamiento hay que cerrar la conexi√≥n, ¬°pr√°ctica de seguridad estandar!
\ 

```{r}

dbDisconnect(connec)

```


## Nuestros blogs

Leo los coentarios que han sido registrados mediante _Google forms_.

```{r}
pacman::p_load(googlesheets4, stringr, dplyr, 
               tidyr, ggplot2, flextable, DT)

# keyring::key_get(service = "google-sheets", "equihuam")

options(gargle_oauth_email = "equihuam@gmail.com", 
        gargle_oob_default = TRUE,
        gargle_oauth_client_type = "web")

gs4_auth()

url_gs <- "https://docs.google.com/spreadsheets/d/1bHAFCwoJToh8VVbfsmqx2GNaBvEiq7RYA4Pt1ljVtD4/edit?resourcekey=&gid=834459562#gid=834459562"
datos_id <- str_extract(url_gs, "(?<=/d/)(.*?)(?=/edit)")

datos_blogs <- read_sheet(datos_id)

```


Los datos de valoraci√≥n de los blogs son los siguientes.


```{r}
datos_blogs |> 
  select(`Blog que revisaste`, Comentarios) |> 
  arrange(`Blog que revisaste`) |> 
  datatable(colnames = c("Blog", "Comentarios"),
            rownames = FALSE,
            options = list(
              autoWidth = TRUE,
              columnDefs = list(
                  list(targets = 0,       # Primera columna (blog)
                       width = '150px'    # ancho de 200 pixels
                       ),
                  list(targets = 1,       # Columna 2 comentarios
                       width = '4 00px'))))

```


Ahora, solo resta actualizar la base de datos con la informaci√≥n recabada. Esto lo haremos con un `INSERT` de **SQL**.

Para evitar mostrar datos confidenciales utilic√© variables de sistema creadas con la funci√≥n `Sys.setenv(subase_.... = <<valor>>`, recupero los valores con `Sys.getenv("subase...")`. Las claves secretas las proteg√≠ con keyring.


```{r}
# Sys.setenv(subase_eq_ip = "aws-0-us-east-1.pooler.supabase.com",
#            subase_eq_port = "6543")

tryCatch({
  drv <- Postgres()
  cat("Conectando con la base de datos‚Ä¶\n")
  connect <- dbConnect(drv, 
                      dbname   = "postgres",
                      host     = Sys.getenv("subase_eq_ip"), 
                      port     = Sys.getenv("subase_eq_port"),
                      user     = key_list("subase-eq")[1,2],
                      password = key_get(service = "subase-eq", 
                                         username = key_list("subase-eq")[1,2]))
  
  cat("¬°Conexi√≥n exitosa!\n\n")
},
error=function(cond) {
  print(cond)
  print("<<<Conexi√≥n fallida>>>")
})

# Instrucci√≥ne·π°para insertar los datos
for (i in (1:length(datos_blogs$`Direcci√≥n de correo electr√≥nico`)))
{
  blog <- datos_blogs$`Blog que revisaste`[i]
  comentario <- datos_blogs$Comentarios[i]
  print(blog)
  blog_insert <- paste0('
      INSERT INTO comentarios("blogId", comentario)
      SELECT session_id,\'', comentario, '\' FROM "datosBlogs" 
      WHERE url_blog ILIKE \'%', blog, '%\';')

  dbExecute(connect, blog_insert)

}
```


Ahora consigo los datos combinados tomados de las dos tablas para conocer el autor del blog y los comentarios que ha recibido.
  

```{r}
dbGetQuery(connect, "SELECT nombre, comentario 
                           FROM \"comentarios\", \"datosBlogs\"
                           WHERE  \"blogId\" = \"session_id\";") |> 
  flextable() |> 
  width(j = 1, width = 2) |> 
  width(j = 2, width = 5)


   dbDisconnect(connect)

```
