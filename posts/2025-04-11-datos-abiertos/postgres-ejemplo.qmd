## Preparar Linux y PostgreSQL en tu m√°quina Windows

### WSL
Ahora Windows incluye la opci√≥n de habilitar una versi√≥n de linux virtual que convive con el ambiente Windows, la caracter√≠stica que denomina [*Windows Subsystem Linux* (**WSL**)](https://learn.microsoft.com/es-mx/windows/wsl/). Hay que habilitarlo desde el panel de control como *caracter√≠sticas de Windows* como se ilustra en la @fig-wsl, o mediante comandos desde una ventana de **Powershell** (ü™ü + X; y luego I).


```bash
wsl --install
wsl --version
wsl --install -d ubuntu
```
\ 

Habr√° ahora un √≠cono con el ping√ºino de Linux en tu equipo, que es un enlace a una ventana de terminal directamente asociada con **WSL**. M√°s adelante ser√° una forma de acceso conveniente, pero por lo pronto puedes seguir con la que ya tienes de **Powershell**.

### PostgreSQL

Una vez activado **WSL**, tendr√°s, en este ejemplo, un *linux Ubuntu* en marcha. Ahora puedes instalar _PostgreSQL_ en esa m√°quina virtual. Lo primero es acceder a _linux_ mediante una consola de sistema. Bastar√° con que escribas `wsl` en **Powershell**. Puede ser la misma ventana que usaste para instalar todo, si todav√≠a la tienes abierta, o usar el nuevo √≠cono del ping√ºino. Ahora, escribe las siguientes instrucciones en _linux_. B√°sicamente le estas diciendo que entre en modo de _superusuario_ (`sudo`) y que vaya al servicio general de almacenamiento de aplicaciones (`apt-get`) y conseguir lo necesario para instalar _PostgreSQL_ en la versi√≥n que incluye extensiones y adiciones comunes al _PostgreSQL_ b√°sico.


``` bash
sudo apt-get install postgresql postgresql-contrib
```

La instalaci√≥n inicial de *PostgreSQL* utiliza como usuario de arranque a `postgres`. Es necesario darle un *password* para lograr que *PostgreSQL* nos de acceso. El siguiente comando lo hace. Te generar√° una l√≠nea en la que te pide ingreses la nueva clave que quieres darle al usuario `postgres`. Escribiras pero no ver√°s lo que escribes, por seguiridad obviamente. Al terminar aprieta la tecla **enter/intro/&#9166;**

``` bash
sudo passwd postgres
```



sudo -u postgres psql

sudo -u postgres createuser <username>

sudo -u postgres createdb <dbname>

$ sudo -u postgres psql
psql=# alter user <username> with encrypted password '<password>';
grant all privileges on database <dbname> to <username> ; 
```

Para iniciar tu interacci√≥n con *PostgreSQL* incialmente necesitar√° entrar a la interfaz del sistema con el siguiente comando.

``` bash

sudo -u postgres psql

sudo -u postgres createuser <username>

sudo -u postgres createdb <dbname>

$ sudo -u postgres psql
psql=# alter user <username> with encrypted password '<password>';
grant all privileges on database <dbname> to <username> ; 
```

Una vez que todo ha sido configurado podr√°s tener acceso a PostgreSQL yhacer operaciones de todo tipo. A continuaci√≥n un ejemplo muy sencillo con la bae de datos de ejemplo "dbdrental".

```{r}
pacman::p_load(RPostgres, keyring)


tryCatch({
  drv <- Postgres()
  print("Connecting to Database‚Ä¶")
  connec <- dbConnect(drv, 
                      dbname   = "dvdrental",
                      host     = Sys.getenv("psql_eq_ip"), 
                      port     = Sys.getenv("psql_eq_port"),
                      user     = key_list("psql-eq")[1,2],
                      password = key_get(service = "psql-eq", 
                                         username = key_list("psql-eq")[1,2]))
  
  print("Database Connected!")
},
error=function(cond) {
  print(cond)
  print("Unable to connect to Database.")
})

df <- dbGetQuery(connec, "SELECT first_name, last_name FROM actor")

head(df)

dbDisconnect(connec)

```
