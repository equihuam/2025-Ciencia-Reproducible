---
title: "¿Qúe puedo incluir en mis documentos?"
author: "Miguel Equihua"
image: "images/Image by Mojca-Peter from Pixabay - seeds-1217133_1280.jpg"
lang: es
date: 28/feb/2025

categories: [mapas, tablas, gráficas, galería]

code-fold: true
code-summary: "muestra el escript:"
fig-cap-location: top
---


## Visita a la galería de Quarto

```{=html}
<iframe width="780" height="500" 
        src="https://quarto.org/docs/gallery/" title="Webpage example"
        style="border:5px solid brown;"
   >
</iframe>
```


## Platiquemos sobre tus intereses

Tu Blog contendrá alguno o varios de los siguientes componentes:

+ Tablas de datos.
+ Gráficas.
+ Mapas.
+ Análisis de datos geográficos.
+ Análisis de series de tiempo.
+ Modelos matemáticos.
+ Análisis estadísticos.
+ Análisis de datos moleculares.
+ Análisis de imágenes.
+ Análisis de audio.
+ Alguna otra cosa que sea de tu interés.

Sugiero hacer una reflexión sobre esto y considerar también de qué manera se obtendrán los datos, procesarán y presentarán.

### Algunas ideas para animar la charla

rvest helps you scrape (or harvest) data from web pages. It is designed to work with magrittr to make it easy to express common web scraping tasks, inspired by ...


## Datos en Mi equipo

Obviamente, la forma más sencilla de acceder a datos es cuando los tenemos en nuestro propio equipo. En este caso lo usual es que sea alguno de los formatos de Microsoft (Word o Excel) o algún formato genérico como los identificados como **txt** (*texto plano*) o **csv** (*valores separados por comas*). Puuede haber otras variantes de archivos de datos, como **kml**, **GeoJson**, **GeoTIFF** o **shp** (*shape file*) usuales en la gestión de *datos geográficos*. En Genómica está el formato **fasta**, que también cuenta con bibliotecas adecuadas en *R*. Hay una correspondiente variedad de recursos para leer todos estos tipos de datos en *R* así como para analizarlos y preparar resúmenes, modelos y gráficos de interés. A continuación veremos algunos ejemplos sencillos para tener una idea del proceso general.

Para nuestros fines didácticos ya hemos visto como podemos interactuar con documentos de tipo texto plano. Ahora quisiera que vieramos como leer datos de Excel y de Word.

### Datos Excel

Tengo este archivo de datos obtenidos por D.L. Cunningham de la Universidad de Cornell. Son registros de masa corporal (g) de pollos de acuerdo con su posición en la *jerarquía de picotazos* (@tbl-pollos). Veamos los datos.

```{r}
#| label: tbl-pollos
#| tbl-cap: Jearquía de Picotazos

pacman::p_load(tidyverse, ggplot2, readxl, flextable)

pollos_peso <- read_excel("datos/peck_odr.xls", skip = 2)

pollos_peso |>
  flextable() |> 
  width(j = 2, width = 25, unit = "mm") |> 
  set_header_labels(jerarquia = "Posición",
                    gallinero = "Gallinero",
                    peso = "Peso\n(g)")

```

los datos están en un formato poco conveniente para un análisis general. Hagamos algunas operaciones para ponerlos en una forma más adecuada. Básicamente buscaremos cambiar del formato extendido, bueno para visualizar, a uno apilado, más apropiado para el análisis estadístico

```{r}
#| label: grafica_pollos

pollos_peso <- pollos_peso %>%
                 rename(jerarquia = `Jerarquía\npor picoteo`) %>% 
                 pivot_longer(cols = `Gallinero 1`:`Gallinero 7`, 
                              names_to = "gallinero",
                              values_to = "peso") %>% 
                 mutate(gallinero = factor(gallinero),
                        jerarquia = as.integer(jerarquia)) %>% 
                 arrange(gallinero)

ggplot(pollos_peso, aes(x = jerarquia, y = peso)) +
  geom_point(color = "darkgreen")

```

¿qué análisis sugieres habría que hacer ahora?


## Un bonito mapa

¿Piensas que hacer mapas impactantes es cosa de una elite? Quizás la belleza de muchos mapas que encontramos por ahí justifica pensarr así. Pero ahora podemos aspirar a incluir hermosos mapas en nuestros documentos, pues el acceso a _recursos abiertos_ muy competentes de mapeo ha camiado mucho. En _R_ tenemos ahora biibliotecas como `sf`, `raster`, `terra`, `leaflet` y `tmap`, además del software especializado **QGIS**, 

Con `leaflet` puedes incluir mapas interactivos es bastante sencillos. Veamos como empezar con esta biblioteca con unas breves instrucciones.


```{r}
#| label: mapa

library(leaflet) # cargar la biblioteca requerida.

basemap <- leaflet() %>%
  # ubicación y nivel de zoom
  setView(lng = -96.91841, lat = 19.515157, zoom = 20) %>% 
  # Añade proveedor de maa
  addProviderTiles(
    "OpenStreetMap",
    # Dale un nombre a la capa
    group = "Mapa-OpenStreet"
  )

basemap

```
\  
\  

Agregar capas, marcadores, etc. Tampoco es muy complicado. Veamos un ejemplo.

\  
\  

```{r}

icon.fa <- makeAwesomeIcon(icon = "bicycle", markerColor = "green",
                           library = "fa",
                           iconColor = "red")


map_1 <- basemap %>% 
  addProviderTiles("Esri.WorldImagery", 
                   group = "ESRI") %>% 
  addWMSTiles(
    "http://gaia.inegi.org.mx/NLB/tunnel/wms/wms61?",
    layers = "Ortofotos",
    options = WMSTileOptions(format = "image/png", transparent = TRUE),
    attribution = "Inegi",
    group = "Inegi-ortofoto") %>% 
  addWMSTiles(
    "http://gaia.inegi.org.mx/NLB/tunnel/wms/wms61?",
    layers = "c407",
    options = WMSTileOptions(format = "image/png", transparent = TRUE),
    attribution = "Inegi",
    group = "Humedad del suelo") %>% 
  addAwesomeMarkers(
    lat = 19.5152,
    lng = -96.91841,
    label = "Starting point",
    icon = icon.fa
  ) %>% 

  # Layers control
  addLayersControl(
    baseGroups = c(
      "Mapa-OpenStreet",
      "ESRI",
      "Inegi-ortofoto",
      "Humedad del suelo"
    ),
    options = layersControlOptions(collapsed = FALSE)
  )

map_1

```
| 
| 

Otra posibilidad para producir documentos con mapas más bien de tipo impreso es la biblioteca `tmap` podemos hacer cosas como las siguiente. Usaremos los datos contenidos en el paquete `spData` para ejemplificar.

| 
| 

```{r}
#| warning: false
#| message: false

pacman::p_load(tmap, spData)

data("urban_agglomerations")

urb_1970_2030 <-  urban_agglomerations %>% 
  filter(year %in% c(1970, 1990, 2010, 2030))

data("World")

tm_shape(world) +
  tm_polygons(fill = "lightblue") +
  tm_crs("auto") +
  tm_shape(urb_1970_2030, ) +
  tm_symbols(fill = "black", 
             col = "white", 
             size = "population_millions", 
             size.legend = tm_legend(title = "Población (millones)")) +
  tm_facets_wrap(by = "year", nrow = 2)
```
| 

A pesar de lo dicho arriba, con esta biblioteca también se puede incursionar en  preparar productos geográficos dinámicos, como sería una animación. 

| 

```{r}
#| warning: false
#| message: false
#| echo: false

urb_anim <- tm_shape(world) + 
  tm_polygons() + 
  tm_crs("auto") +
  tm_shape(urban_agglomerations) + 
  tm_symbols(size = "population_millions", fill = "green") +
  tm_facets_wrap(by = "year", nrow = 1, ncol = 1, free.coords = FALSE) 

anim <- urb_anim %>%     
  tmap_animation(filename = "img/urb_anim.gif", delay = 45);

knitr::include_graphics("img/urb_anim.gif")

```

|  
|  

## Un Video

{{< video https://youtu.be/wo9vZccmqwc start="10" >}}
