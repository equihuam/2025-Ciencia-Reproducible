{
  "hash": "72e744387b086b9f2182bf859803c3d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Los primeros pasos\"\nauthor: \"Miguel Equihua\"\nlang: es\ndate: 21/feb/2025\ncategories: [taller, inicio, markdown, rstudio, git]\nimage: \"images/Image by Mojca-Peter from Pixabay - seeds-1217133_1280.jpg\"\ncode-fold: true\ncode-summary: \"muestra el escript:\"\nfig-cap-location: top\n---\n\n\n\n\n## [Markdown](https://gesel.github.io/materiales/10Gu%C3%ADa_RMarkdown.pdf), [Quarto](https://rstudio.github.io/cheatsheets/quarto.pdf) y la [ciencia abierta](pres-ciencia-abierta.qmd)\n\n*Tan simple como escribir en la página en blanco con pequeñas marcas de intención*. Se ha inventado varias veces y el columpio ha ido y venido entre el interés en ver y controlar las marcas directamente sobre el texto y la preferencia de ver sólo el producto terminado **WYSIWYG** (*lo que ves es lo que tienes*, aunque el marcado existe, pero lo hace la máquina por ti).\n\n::: {layout=\"[1, 1.5]\"}\n![Libro de Irene Vallejo](images/900-el-infinito-en-un-junco-irene-vallejo-alfa.png){#fig-junco width=\"200px\"}\n\nEl trabajo del científico, el ingeniero, el estudiante o el creador de contenidos transita por el proceso de escribir, almacenar y dar formato presentable a los documentos. La escritura da origen a la historia y deja atrás la prehistoria. Un largo proceso de evolución cultural apasionante que tiene un hermoso recuento en el libro de Irene Vallejo *El infinito en un Junco* ([Fig. @fig-junco]). Hemos explorado las rocas, la arcilla, los pigmentos vegetales y minerales, las pieles de animales y los tejidos vegetales para escribir. Hoy lo hacemos sobre el éter y nos apoyamos en procesos electromagnéticos.\n:::\n\nHacer esto ha involucrado a incontables inventores y lo hacemos recurriendo a herramientas y formatos que tienen registro de propiedad a nombre de lucrativas empresas particulares. Lo hacemos así y el hecho no nos merece ni un suspiro reflexivo sobre sus implicaciones.\n\nA veces nos incomodan detalles o grandes fallas que obstaculizan la expresividad que requiere la escritura académica creativa. En general, la práctica actual se opone a lograr un flujo ágil y transparente a lo largo del proceso completo que involucra organizar los datos, analizarlos, sintetizarlos y publicar los hallazgos obtenidos. Por la fuerza del hábito, y a pesar de inconvenientes, la mayoría de las revistas aún insisten en recibir textos en formato **docx**.\n\nEn el movimiento social que nos invita a reflexionar sobre la *ciencia abierta*, hay quienes sostenemos que el conocimiento y el proceso creativo que lo impulsa debe ser lo más libre posible. El talento y la sabiduría su núcleo. Sobre todo en áreas como la salud y la calidad del entorno ecológico en el que vivimos.\n\n::: {layout=\"[1.5, -0.1, 1]\"}\nMarkdown fue desarrollado en 2004 por **John Gruber** ([Fig. @fig-gruber]). Ideo una manera de poner marcas de formato en un texto común y corriente (lo llamaremos *texto plano*). También construyó un programa de cómputo (lo escribió en el lenguaje **Perl**), para convertir los archivos ya marcados en *Markdown* a algo conveniente para que las computadoras nos los pudieran presentar a través de la **Web**. Hacer esto implica reconstruir y transformar el documento original a un nuevo formato, el **HTML** (*HyperText Markup Language*). Encontrarás ayuda sobre como usar *Markdown* en el menú de ayuda de **RStudio**: *Help* $\\rightarrow$ *Markdown Quick Reference*.\n\n![John Gruber](images/John_Gruber,_2009_(cropped)%20-%20By%20Randy%20Stewart,%20CC%20BY-SA%203.0,%20httpscommons.wikimedia.orgwindex.phpcurid=10682505.jpg){#fig-gruber width=\"200px\"}\n:::\n\nHe aquí uno de los grande valores que busca el movimiento en favor de una *ciencia abierta*: **romper las barreras que limitan el acceso a los textos y a los datos**. El uso de *texto plano* para escribir y organizar archivos de datos tienen muchas ventajas. Para empezar se pueden leer prácticamente en cualquier dispositivo, independientemente de *sistema operativo* e intereses comerciales de los fabricantes. Los archivos escritos así han superado la *dura prueba del paso del tiempo* mejor que otros tipos de archivos.\n\nEl día de hoy empezaremos a utilizar la idea del *Markdown*. Producirás tus primeros archivos que serán legibles como texto plano y que a la vez estarán listos para ser producidos en una variedad de presentaciones que usualmente requerimos para nuestro propio registro de actividades y para interactuar con colegas o maestros. Además, de lo que hizo en su momento *Gruber*, ahora existen herramientas como **Pandoc**, que pueden convertir archivos desde *Markdown* a una variedad de otros formatos que seguramente serán de tu interés en algún momento. Otro de los valores de la *ciencia abierta*: **favorecer el reuso de los productos de información y conocimiento**\n\n## Quarto\n\nLo que haremos es:\n\n1.  Arrancar *RStudio*\n2.  Crear un nuevo proyecto\n3.  [!!!Empezar a escribir!!!]{style=\"color: oro\"}\n\n### RStudio\n\nEs un *entorno integrado de desarrollo* (**IDE**). Como tal, ofrece una estructura que permite interactuar con distintos aspecto del proceso creativo. En la figura puedes ver lo que usualmente tienes a tu alcance en una instalación común. Esta configuración la puedes modificar según tus preferencias desde el menú *View* ⟹ *panes*. Pero probablemente al inicio te bastará con la configuración que ya tienes.\n\n![](images/Rstudio.png)\n\nLa gente de **Posit**, desarrolladores de *RStudio* está trabajando en la producción de versiones del programa en otros idiomas, aparte del inglés. En este momento existe una prueba en francés, pero no está listo nada en español. Mientras tanto, una ayuda parcial puede ser tener acceso a los reportes de error que dan los comandos en español, para eso deberás usar el comando siguiente en la ventana de *consola*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Idioma español en sistema de codificación digital UTF-8\nSys.setLanguage(lang = \"es.UTF-8\")\n```\n:::\n\n\n\n\nEsto puede ayudar, pero puede ser un problema si necesitas buscar ayuda en Internet, que las más de las veces está en inglés. Entonces, si quieres regresar a éste idioma, harás algo semejante a lo de arriba, pero usarás el código apropiado, por ejemplo para inglés norteamericano: \"en_us.UTF-8\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Idioma inglés norteamericano en sistema de codificación digital UTF-8\nSys.setLanguage(lang = \"en_us.UTF-8\")\n```\n:::\n\n\n\n\n### Mi primer documento Quarto\n\nTodo listo. Anímate a escribir tus primeras líneas en un documento *Quarto*.\n\n::: {.callout-caution collapse=\"true\" title=\"Nuevo proyecto\"}\n*Rstudio* tiene en su menú **file** la opción de preparar documentos en *Quarto*.\n\n![](images/proyecto-blog.png)\n:::\n\n## Guardar el trabajo con la intención de colaborar\n\nAhora ya tenemos el texto en nuestras máquinas, almacenado en casa. ¿Podemos hacer algo más para asegurar esos materiales y facilitar compartirlos con quienes queramos? Te sugiero considerar **git** y **github** para eso. Podemos imaginar que el espacio de almacenamiento en tu máquina es como una parcela de siembra, cada dato tiene coordenadas de localización y así los recuperas cuando los quieres. Lo que hace *git* es agregar una *ventana de tiempo* que te permite asomarte a la historia de lo que pasó en esas ubicaciones que te interesan.\n\n![Fuente: *Final.doc* en **Piled Higher and Deeper** por Jorge Cham, http://www.phdcomics.com](images/version_control_motivation_comics.png){width=\"40%\"}\n\n### ¿Qué es Git?\n\n::: {layout=\"[3,1]\"}\nEs una aplicación diseñada por el iniciador del desarrollo de Linux, **Linus Torvalds** ([Fig. @fig-torvalds]). [Git](https://git-scm.com/) es un sistema eficiente confiable y distribuido de control de versiones. El control de versiones es simplemente el seguimiento y registro de los cambios que va teniendo un documento a lo largo del tiempo. El concepto *distribuido* se refiere a que el registro local que tengas en tu máquina o para el caso en cualquier número de máquinas, es un registro completo, **clonado** del proyecto. Estos repositorios locales plenamente funcionales permiten trabajar aún cuando no tengas acceso a Internet. Los autores realizan y registran su trabajo localmente y, cuando lo encuentren conveniente, sincronizan la copia local del repositorio con la del servidor. En la actualidad *Git* se ha convertido en el estándar mundial *de facto* para el control de versiones.\n\n![Linus Torvalds](images/Lf%20Asia-wikimedia-%20by%20the%20Archive%20Team-CC%20BY%203-.jpeg){#fig-torvalds width=\"80%\"}\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Activar git\"}\nPara activar **git** en tu proyecto tienes dos opciones:\n\n1.  Hacerlo desde el principio marcando la casilla respectiva al momento de crear el proyecto.\n2.  Utilizar la biblioteca de herramientas auxiliares [`usethis`](https://usethis.r-lib.org/articles/git-credentials.html).\n\nCon este comando creas lo necesario para usar **git** en tu proyecto.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git()\n```\n:::\n\n\n\n\nEn cualquier caso, ahora conviene verificar como está configurado el espacio de trabajo. En la ventana de **consola** puedes escribir los siguientes comandos para averiguar detalles de tu configuración.\n\nEsto te dirá como se llama la *ventana de tiempo* que has elegido definir como base de trabajo, puedes tener tantas ramas distintas como consideres, pero conviene que una sea la principal. Se solía llamar a esta rama **master**, pero ahora se ha considerado que la !esclavitud ya ha sido abolida!, así que hay una tendencia a mejor llamarle **main**. En realidad puedes llamarla como quieras.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_default_branch()\n```\n:::\n\n\n\n\nSi quieres configurar tu instalación de **RStudio** para que siempre defina la rama base como *main*, puedes usar el siguiente comando. Aunque esto sólo actuará para futuros proyectos, no cambiará nada en los que tienes ya creados hasta este momento.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_default_branch_configure(name = \"main\")\n```\n:::\n\n\n\n\nSi lo que quieres es modificar la rama principal del proyecto con el que estas trabajando y que ya tienes abierto, este es el comando que te ayudará. En este ejemplo uso lo que es ya práctica común, migrar de *master* a *main*, pero puedes tomar tus propias preferencias sin ningún problema, aunque obviamente la parte **from** debe ser la existente que deseas modificar.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_default_branch_rename(from = \"master\", to = \"main\")\n```\n:::\n\n\n\n\nNo todos los archivos que están en el espacio de trabajo son realmente de interés como para seguir su historia en el tiempo y podría haber también cosas que nunca deberían estar registradas en un sistema que te expone al acceso público generalizado: claves personales, tokens, identificadores de archivos privados, etc. Aunque ante esto no hay mejor cosa que ser prudente y estar atentos, existe la función `vacunar` que busca ayudarte a evitar estos problemas. Para activar esta ayuda en tu proyecto puedes usar este comando.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_vaccinate()\n```\n:::\n\n\n\n\nEsto pone ya en operación las capacidades de **git** en tu máquina. Para usarlas debes dirigirte a la pestaña respectiva. Con la función **Commit** generas el registro del estado de los archivos del proyecto al momento de activar el comando. Para operar esto debes decidir que archivos enviar al registro histórico, marcados como *staged*. Al apretar el botón **Commit** aparecerá una ventana en donde se reportan los detalles de lo que estas registrando. Cada **Commit** requiere anotar un mensaje descriptivo breve de lo que contiene el \"corte\". Una vez que está todo resuelto, hay que apretar el botón **Commit** en esa pantalla y esperar algunos segundos a que termine el proceso de registro en la base de datos respectiva.\n:::\n\n::: {.callout-warning collapse=\"true\"}\n## Enviar el *repositorio* **git** a la nube\n\nAhora estas preparada o preparado para enviar tu trabajo a *la nube*, lo haremos con el servicio de **Github**, aunque hay varias opciones (como **gitlab** por ejemplo).\n\nNuevamente nos ayudará `usethis`para hacer esto. Lo primero es que para comunicar **RStudio** con **Github** necesitas registrar un **token** de ese servicio en tu equipo. El comando para esto es:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n\n\nEsto te lleva a la página de **Github** en la que hay que generar el **token**. Hay que responder las preguntas que te haga la página, aunque todo estará *prellenado* con lo normalmente necesario. Cuando esté a tu gusto, aprieta el botón respectivo. Aparecerá una nueva pantalla con el **token**. Este **token** que aparece, es la única vez que lo verás, por lo que conviene copiarlo al *portapapeles* de tu máquina (**ctrl-c** en windows) y tenerlo a buen resguardo por lo pronto. En seguida hay que ejecutar este otro comando en la consola de *RStudio*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\n\n\nSi es la primera vez que registras un **token** te pedirá que lo registres, dale *paste* (**ctrl-v** en Windows). Si ya tienes un registro dado de alta, te informará sobre lo que tiene anotado y te dará oportunidad de decidir qué quieres hacer en seguida.\n\nTodo está ya preparado, sólo falta poner en uso el vínculo que acabamos de crear. Para eso bastará con decir:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_github()\n```\n:::\n\n\n\n\nPor cierto, este es el comando que necesitarán en lo sucesivo para vincular cualquier nuevo proyecto a tu cuenta de **Github**, siempre y cuando tu **token** este vigente.\n:::\n\n::: {layout=\"[2,1]\"}\nUna vez terminadas estas tarea puedes ir a la pestaña **git** cuando lo consideres conveniente y ordenar a **RStudio** que envié todos los **commits** que están pendientes hasta el momento a **Github**. Para hacerlo deberás apretar el botón **push**. Antes de hacerlo siempre es conveniente pedirle a **git** que se ponga al día con lo que ya está registrado en la *nube*, esto lo logras con el botón **pull**. Esto nos lleva a una rutina de operación con **git** que se resume en la figura siguiente.\n\n![](images/En%20caso%20de%20incendio.png){width=\"150px\"}\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Resumen rutinario para usar **git**\n\nClaro está que configurar todo la primera vez es un poco complicado, pero si todo está listo: git instalado, cuenta de Github, token activado, etc. la operación cotidiana es mucho más sencilla.\n\nEn la figura se ilustran las dos rutas para hacerlo en *RStudio*.\n\n![](images/proyecto-con-git.png)\n\nEvidentemente, si seguiste la ruta azul, tu repositorio ya existe en *Github*, una vez que hayas **clonado** el repositorio en tu máquina todo queda listo para concentrarte en escribir. Si optaste por la ruta verde, entonces deberás crear un nuevo repositorio en *Github*. Para hacerlo Utiliza `usethis` en la pestaña de consola.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_github()\n```\n:::\n\n\n\n\nEso es todo.\n\n| \n| \n:::\n\n:::: {.callout-caution collapse=\"true\"}\n## Publicar tu Blog con ayuda de Netlify\n\nEsta operación inicia en el sitio de *Netlify*, así que por favor dirígete allá e ingresa con tus datos de cuenta si ya los tienes, o registrare para tener acceso al servicio. En un principio no necesitas pagar nada y para la mayoría de los propósitos es muy probable que no lo requieras. En todo caso hay opciones para acceder a especificaciones más *profesionales* que pueden requerir pago, pero siempre podrás elegir lo que más te convenga. En fin, ya debes estar en tu cuenta de *Netlify* ahora.\n\nOjalá las figuras siguientes te ayuden a seguir los pasos necesarios. La tarea es primero, autorizar a *Netlify* para que interactue con *Github*, así que debes autorizar este enlazamiento de servicios. Una vez que lo hayas hecho, podrás, especificar lo que deberá estar vigilando *Netlify* para que tome *continuamente* lo necesario, lo que hayas cambiado en *Github*. La meta es que construya un sitio Web con tu contenido y lo publique en Internet, y que lo actualice cada vez que des **push** a tu *blog* en *RStudio*. Después de autorizar el vínculo entre los servicios sigue crear un nuevo sitio con tu *blog*, que debe tener en este momento un directorio \\*\\*\\_site\\*\\* como resultado de haber hecho *Render* en *RStudio*, si no ves ese directorio ve a la pestaña **Build** en *RStudio* y pídele que construya el sitio de tu *blog* completo.\n\nLos pasos que hay que seguir para esta primera interacción son los siguiente. Iniciar la vinculación con *Github* seleccionando la opción que ofrece importar los documentos desde un *repo* Git. Esto te llevará a una pantalla en donde podrás elegir la opción de utilizar *Github* como origen de datos, entre otras posibilidades.\n\n![](images/Netlify-1.png)\n\nEl Siguiente paso es autorizar a Netlify a acceder a Github a través de tu cuenta, así como los específicos del repositorio que te interesa vincular. *Esto sólo necesitarás hacerlo la primera vez en que habrás de enlazar tus cuenta*. Esto también implica que se instalará una **aplicación** de vínculo de *Netlify* dentro de tu cuenta de *Github*.\n\n![](images/Netlify-2.png){width=\"350\"}\n\nSi todo ocurrió sin problemas, tendrás ahora en *Github*, en el menú de aplicaciones (Avatar→ Settings→ Applications), un botón que te permitirá configurar el vínculo con *Netlify* según tus requerimientos. También podrás ver los *repos* que hayas autorizado desde *Netlify*. Si le dijiste a *Netliffy* que autorice todos los repositorios, no tendrás que visitar esta opción nunca.\n\n## Creación de un nuevo sitio a publicar\n\n1.  **En Netlify**:\n\n    -   Desde la opción *team* o *site* puedes generar un nuevo sitio.\n\n::: {layout=\"[1,1]\"}\n![](images/Netlify-new-site.png)\n\n![](images/Netlify-new-site-team.png)\n:::\n\nCuando aprietas el botón de *añadir sitio*, aparecerá una nueva pantalla que tiene tres secciones. Se trata de los atributos que tendrás que proporcionar para darle presencia en Internet a tu proyecto y algunos otros atributos que definen como se producirá y actualizará continuamente. Estas operaciones es poco probable que las vuelvas a ver, una vez que tu proyecto esté en producción, aunque desde luego estarán siempre ahí por si deseas hacer ajustes.\n\n#### ¿Qué nombre le daras?\n\nDeberás elegir un nombre que se convertirá en una URL para acceder a tu proyecto. Puede ser cualquier cosa que desees, pero debe ser único. En esta sección puedes escribir nombres y verificar que estén disponibles\n\n![](images/Netlify-config-site-1.png){width=\"50%\"}\n\n#### ¿Qué hará Netlify para operar tu sitio?\n\nEs una colección de atributos para indicarle a *Netlify* dónde conseguir los documentos y como manejarlos. En nuestro caso, muy simple, básicamente hay que decirle en donde están los documentos que *Quarto*, con ayuda de *pandoc*, ha *renderizado*. Si no has cambiado nada en `_quarto.yml` la rama que estamos usando aquí para que *Git* los registre es **main** y, en ella el directorio de producción se llama **site**. Por favor verifica el contenido de esto para ayudarte a comprender mejor lo que estás haciendo.\n\n![](images/Netlify-config-site-2.png){width=\"50%\"}\n\n#### ¿Todo listo? ¡a producción!\n\nEn nuestro caso no hay más que hacer, *Netlify* tiene información suficiente para encargarse de publicar tu proyecto continuamente. Incorporará los cambios que hagas en *RStudio* en la rama principal. Lo hará automáticamente cada vez que envíes tus cambios a *Github*.\n\n![](images/Netlify-config-site-3.png){width=\"50%\"}\n\nSi todo salió bien, en este momento ya debe estar tu proyecto publicado y accesible para cualquier lector del mundo que lo localice y se interese en su contenido.\n::::\n\n::: {.callout-note collapse=\"true\"}\n## Finalmente ¿Cómo quedá todo organizado?\n\n1.  Tienes un proyecto en tu máquina\n2.  Está vinculado con tu cuenta en **Github**\n3.  Están vinculados **Github** y **Netlify**\n\nAhora, sólo queda crear el contenido del *Blog*. Recuerda usar un directorio para cada nueva contribución dentro de la carpeta *posts*. Te sugiero usar un esquema *fecha-tema* para llamar esos archivos. Evita usar espacios y caracteres latinos en los temas. Para trabajar hay que crear un archivo *index.qmd*. Puedes hacerlo desde el menú: **File ⟹ Quarto document...**, o simplemente copiando algún *index.qmd* que tengas por ahí y quieras aprovechar como base para iniciar un nuevo documento.\n\nConfigura el encabezado de control con algo así como:\n\n``` md\n---\ntitle: \"Descriptivo del contenido\"\nauthor: \"Tu Nombre y el de los autores involucrados\"\nlang: es \ndate: {{la fecha de publicación}}\ncategories: [colección de frases clave separadas por comas]\nimage: \"archivo de la imágen que deseas incluir como portada\"\ncode-fold: true\ncode-summary: \"muestra el escript:\"\nfig-cap-location: top\n---\n```\n\nSi es de tu interés, aquí encontrarás [muchos detalles interesanes sobre YAML](https://rpubs.com/drgregmartin/1266674).\n::: \n\n\n::: {.callout-important collapse=\"true\"}\n## Arruiné mi **Blog** ¡¡¡¡Ayuda!!!!\n\n#### Descompuse archivos clave\n\nComo ya nos pasó, puede ser que eches a perder tu archivo _index.qmd_ en la raíz de tu proyecto. Ese documento se encarga de construir la estructura general de tu _blog_. Ojalá hayas echo un **commit** inicial justo acabando de crear tu proyecto. Si fuiste así de sabia o sabio, todo lo que tienes que hacer es buscar el archivo en cuestión y recuperarlo. **Github desktop** será tu amigo para eso.\n\nPor si ocurriera un accidente de este tipo y no hubiera nada más que hacer pongo aquí las líneas generales que suele tener este archivo, cópialas en caso de emergencia y substituye todo lo que tengas en el archivo dañado (si pusiste cosas muy importantes que quiere conservar, haz una copia y haz la reparación en una de ellas. ¡Suerte!\n\n\n``` md\n---\ntitle: \"Título de inicio en tu blog \"\nlisting:    \n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: cloud\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---\n```\n\nRecuerda sólo hacer lo escencial en los documentos en la raíz de tu proyecto: el nombre de tu blog, título inicial y cosas así. No hagas más de lo indispensable en los archivos  **index.qmd** y **\\_quarto.yml** que están en esta ubicación. Toda tu creatividad debes expresarla dentro de subcarpetas contenidas en la carpeta **posts**.\n      \n\n#### !Eché a perder mi blog, pero tengo una versión buena en git!\n\nLo primero es !serenidad y paciencia! Toda la idea de usar [_git_](https://git-scm.com/book/en/v2) es para estos casos. Claro, podrías volverte experta o experto en su uso más profesional mediante comandos, [ojalá te animes](https://www.epirhandbook.com/es/new_pages/collaboration.es.html). Pero por lo pronto hagámoslo con lo que ya tenemos a la mano. Veamos algunos escenarios posibles:\n\n1. Un escenario muy sencillo es cuando estas actualizando un documento que ya pusiste en el registro de _git_. Intentas _renderizarlo_ y para tu sorpresa, ¡falla de manera inexplicable! Para colmo, hiciste un montón de cambios que ya ni te acuerdas. Eso sí, estas seguro o segura de que tu última versión, a la que le hiciste un _commit_, sí funcionaba, no a tu gusto completo, pero no se trababa como el que ahora te tiene de malas. En este caso, busca en la pestaña de _git_ en _RStudio_ el arhivo que estás trabajando, imagino un **index.qmd** en un folder dentro de la carpeta **posts**. Seleccionalo y aprieta el botón derecho del mouse. En las ventanita emergente encontrarás la palabra _revert..._. ¡Eso es!, dale click y recuperará el arhivo de la últia versión que resguardaste con un _commit_. ¡Listo!, estás de regreso y ahora puedes volver a empezar, con más cuidado y mejores ideas.\n\n2. Otro caso es cuando has sido muy diligente y has echo todo bien. Haces cambios a tu gusto y cada vez que lo sientes apropiado has echo tus _commits_. Te vas por un tesito, cambias de humor, trabajas en otra parte de tu **blog** y haces commit a tus nuevos cambios. De pronto, un rayo de inspiración, te hace comprender que lo que hiciste al principio del día no era buena ideas, te arrepientes y quieres regresar a una versión que está seis o diez _commits_ atras, sabes a donde te gustaría regresar pues anotaste un mensaje alusivo que te recuerda claramente el estado del documento que quieres retomar como inicio. ¿Cómo puedes viajar hacia atras en el tiempo a ese preciso momento? Bueno, hacer esto es relativamente sencillo con el comando [`git restore`](https://git-scm.com/docs/git-restore) que puede rescatarte desde la _terminal_ de _RStudio_. Las indicaciones _--source_ y _main~x_ van de cajón (la **x** toma el valor de cuantos _commits_ atras hay que ir en la rama **main**), y terminas con la ruta al archivo de tu interés, en este ejemplo _posts/primer-ejemplo/index.qmd_. \n\n\n```{.bash}\n\ngit restore --source main~5 posts/primer-ejemplo/index.qmd\n \n```\n\n\n:::: {layout=\"[1,1]\"}\nOtra opción para identificar el _commit_ preciso de mi interés es poner enseguida de _--source_ una parte reconocible en forma única de la firma hash *SHA* de 40 caracteres, que identifica en forma exacta a cada _commit_, y que puedes encontrar con la opción _History_ en la pestaña _git_.\n\n![](images/restaurar-a-un-commit-dado.png){width=200 fig-align=\"right\"}\n\n::::\n\n```{.bash}\n\ngit restore --source cc12d23841a  posts/primer-ejemplo/index.qmd\n\n```\n\n\nComo por arte de magia, estás de regreso en el documento solicitado. Quizás _RStudio_ te advierta que hubo cambios y te pida le des indicaciones, lee con cuidado lo que te diga y responde adecuadamente. ¡Listo!\n\n::: \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}