{
  "hash": "329ebf9ed875f0357d9b1a0fe1981edb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Los primeros pasos\"\nauthor: \"Miguel Equihua\"\nlang: es\ndate: 21/feb/2025\ncategories: [taller, inicio, markdown, rstudio, git]\nimage: \"images/Image by Mojca-Peter from Pixabay - seeds-1217133_1280.jpg\"\ncode-fold: true\ncode-summary: \"muestra el escript:\"\nfig-cap-location: top\n\nlightbox: true\n\nformat: \n  html:\n    toc: true\n---\n\n\n\n\n## Markdown y la [ciencia abierta](pres-ciencia-abierta.qmd)\n\n_Tan simple como escribir en la página en blanco con pequeñas marcas de intención_. Se ha inventado varias veces y el columpio ha ido y venido entre el interés en ver y controlar las marcas directamente sobre el texto y la preferencia de ver sólo el producto terminado **WYSIWYG** (_lo que ves es lo que tienes_, aunque el marcado existe, pero lo hace la máquina por ti). \n\n::: {layout=\"[1, 1.5]\"}\n\n![](images/900-el-infinito-en-un-junco-irene-vallejo-alfa.png){width=200px}\n\nEl trabajo del científico, el ingeniero, el estudiante o el creador de contenidos transita por el proceso de escribir, almacenar y dar formato presentable a los documentos. La escritura da origen a la historia y deja atras la prehistoria. Un largo proceso de evolución cultural apasionante que tiene un hermoso recuento en el libro de Irene Vallejo _El infinito en un Junco_. Hemos explorado las rocas, la arcilla, los pigmentos vegetales y minerales, las pieles de animales y los tejidos vegetales para escribir. \n\n:::\n\nHoy lo hacemos sobre el éter y nos apoyamos en procesos electromagnéticos. Hacer esto ha involucrado a incontables inventores y lo hacemos recurriendo a herramientas y formatos que tienen registro de propiedad a nombre de lucrativas empresas particulares. Lo hacemos así y el hecho no nos merece ni un suspiro reflexivo sobre sus implicaciones. \n\nA veces nos incomodan detalles o grandes fallas que obstaculizan la expresividad que requiere la escritura académica creativa. En general, la práctica actual se opone a lograr un flujo ágil y transparente a lo largo del proceso completo que involucra organizar los datos, analizarlos, sintetizarlos y publicar los hallazgos obtenidos. \n\nPor la fuerza del hábito, y a pesar de inconvenientes, la mayoría de las revistas aún insisten en recibir textos en formato **docx**.\n\nEn el movimiento social que nos invita a reflexionar sobre la _Ciencia Abierta_, hay quienes sostenemos que el conocimiento y el proceso creativo que lo impulsa debe ser lo más libre posible. El talento y la sabiduría su núcleo. Sobre todo en áreas como la salud y la calidad del entorno ecológico en el que vivimos.\n\n::: {layout=\"[1.5, -0.1, 1]\"}\n\nMarkdown fue desarrollado en 2004 por **John Gruber**. Ideo una manera de poner marcas de formato en un texto cómun y corriente (lo llamaremos _texto plano_). También construyó un programa de cómputo (lo escribió en el lenguaje Perl), para convertir los archivos ya marcados en _Markdown_ a algo conveniente para que las computadoras nos los pudieran presentar a través de la **Web**. Hacer esto implica recontruir y transforrmar el documento original a un nuevo formato, el **HTML** (_HyperText Markup Language_).\n\n![](images/John_Gruber,_2009_(cropped) - By Randy Stewart, CC BY-SA 3.0, httpscommons.wikimedia.orgwindex.phpcurid=10682505.jpg){width=200px}\n\n:::\n\nHe aquí uno de los grande valores que busca el movimiento en favor de una _ciencia abierta_: **romper las barreras que limitan el acceso a los textos  y a los datos**. El uso de _texto plano_ para escribir y organizar archivos de datos tienen muchas ventajas. Para empezar se pueden leer prácticamente en cualquier dispositivo, independientemente de _sistema operativo_ e intereses comerciales de los fabricantes. Los archivos escritos así han superado la _dura prueba del paso del tiempo_ mejor que otros tipos de archivos.\n\nEl día de hoy empezaremos a utilizar la idea del _Markdown_. Producirás tus primeros archivos que serán legibles como texto plano y que a la vez estarán listos para ser producidos en una variedad de presentaciones que usualmente requerimos para nuestro propio registro de actividades y para interactuar con colegas o maestros. Además, de lo que hizo en su momento _Gruber_, ahora existen herramientas como **Pandoc**, que pueden convertir archivos desde _Markdown_ a una variedad de otros formatos que seguramente serán de tu interés en algún momento. Otro de los valores de la _ciencia abierta_: **favorecer el reuso los productos de información y conocimiento** \n\n\n##  Quarto\n\nLo que haremos es:\n\n1. Arrancar _RStudio_\n2. Crear un nuevo proyecto\n3. [!!!Empezar a escribir!!!]{style=\"color: oro\"}\n\n_Rstudio_ tiene en su menu **file** la opción de preparar documentos en _Quarto_.\n\n![](images/proyecto-blog.png)\n\n## Guardar con la intención de colaborar\n\nAhora ya tenemos el texto en nuestras máquinas, almacenado en casa. ¿Podemos hacer algo más para asegurar esos materiales y facilitar compartirlos con quienes queramos? Te sugiero considerar **git** y **github** para eso. Podemos imaginar que el espacio de almacenamiento en tu máquina es como una parcela de siembra, cada dato tiene coordenadas de localización y así los recuperas cuando los quieres. Lo que hace *git* es agregar una _ventana de tiempo_ que te permite asomarte a la historia de lo que pasó en esas ubicaciones que te interesan.\n\n\n![Fuente: _Final.doc_ en **Piled Higher and Deeper** por Jorge Cham, http://www.phdcomics.com](images/version_control_motivation_comics.png){width=60%}\n\n### ¿Qué es Git?\n\nEs una aplicación diseñada por el iniciador del desarrollo de Linux [Linus Torvalds](https://es.wikipedia.org/wiki/Linus_Torvalds). [Git](https://git-scm.com/) es un sistema eficiente confiable y distribuido de control de versiones. El control de versiones es simplemente el seguimiento y registro de los cambios que va teniendo un documento a lo largo del tiempo. El concepto _distribuido_  se refiere a que el registro local que tengas en tu máquina o para el caso en cualquier número de máquinas, es un registro completo, **clonado** del proyecto. Estos repositorios locales plenamente funcionales permiten trabajar aún cuando no tengas acceso a Internet. Los autores realizan y registran su trabajo localmente y, cuando lo encuentren conveniente, sincronizan la copia local del repositorio con la del servidor. En la actualidad _Git_ se ha convertido en el estándar mundial _de facto_ para el control de versiones.\n\nPara activar git en tu proyecto tienes dos opciones:\n\n1. Hacerlo desde el principio marcando la casilla respectiva al momento de crear el proyecto.\n2. Utilizar la biblioteca de herramientas auxiliares [`usethis`](https://usethis.r-lib.org/articles/git-credentials.html).\n\n\nCon este comando creas lo necesario para usar **git** en tu proyecto.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git()\n```\n:::\n\n\n\n\nEn cualquier caso, ahora conviene verificar como está configurado el espacio de trabajo. En la ventana de **consola** puedes escribir los siguientes comandos para averiguar detalles de tu configuración.\n\n\nEsto te dirá como se llama la _ventana de tiempo_ que has elegido definir como base de trabajo, puedes tener tantas ramas distintas como consideres, pero conviene que una sea la principal. Se solía llamar a esta rama **master**, pero ahora se ha considerado que la !esclavitud ya ha sido abolida!, así que hay una tendencia mejor llamarle **main**. En realidad puedes llamarla como quieras.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_default_branch()\n```\n:::\n\n\nSi quieres configurar tu instalación de **RStudio** para que siempre defina la rama base como _main_, puedes usar elsiguiente comando. Aunque esto sólo actuará para futuros proyectos, no cambiará nada en los que tienes ya creados hasta este momento.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_default_branch_configure(name = \"main\")\n```\n:::\n\n\nSi lo que quieres es modificar la rama principal del proyecto con el que estas trabajando y que ya tienes abierto, este es el comando que te ayudará. En este ejemplo uso lo que es práctica común, de migrar de _master_ a _main_, pero puedes tomar tus propias preferencias sin ningún problema, aunque obviamente la parte **from** debe ser la existente que deseas modificar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_default_branch_rename(from = \"master\", to = \"main\")\n```\n:::\n\n\n\nNo todos los archivos que están en el espacio de trabajo son realmente de interés como para seguir su historia en el tiempo y podría haber también cosas que nunca deberían estar registradas en un sistema que te expone al acceso público generalizado: claves personales, tokens, identificadores de archivos privados, etc. Aunque ante esto no hay mejor cosa que ser prudente y estar atentos, existe la función `vacunar` que busca ayudarte a evitar estos problemas. Para activar esta ayuda en tu proyecto puedes usar este comando.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_vaccinate()\n```\n:::\n\n\n\nEsto en operación las capacidades de **git** sólo en tu máquina. Para usarlas debes operar en la pestaña respectiva con la función **Commit**: genera el registro del estado de los archivos del proyecto al momento de activar el comando. Para operar esto debes decidir que archivos enviar al registro histórico, marcados como _staged_. Al apretar el botón **Commit** aparecerá una ventana en donde se reportan los detalles de lo que estas registrando. Cada **Commit** requiere anotar un mensaje descriptivo breve de lo que contiene el \"corte\". Una vez que está todo resuelto, hay que apretar el botón **Commit** en esa pantalla y esperar algunos segundos a que termine el proceso de registro en la base de datos respectiva.\n\n\n\n## Enviar el _repositorio_ **git** a la nube\n\nAhora estas preparada o preparado para enviar tu trabajo a _la nube_, lo haremos con el servicio de **Github**, aunque hay varias opciones (como **gitlab** por ejemplo).\n\nNuevamente nos ayudará `usethis`para hacer esto. Lo primero es que para comunicar **RStudio** con  **Github** necesitas registrar un **token** de ese servicio en tu equipo. El comando para esto es:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n\nEsto te lleva a la página de **Github** en la que hay que generar el **token**. Hay que responder las preguntas que te haga la página, aunque todo estará _prellenado_ con lo normalmente necesario. Cuando esté a tu gusto, aprieta el botón respectivo. Aparecerá una nueva pantalla con el **token** que habrá que copiar al _portapapeles_ (**ctr-c** en Windows). Este **token** que aparece, es la única vez que lo verás, por lo que conviene copiarlo al _portapapeles_ de tu máquina (**ctrl-c** en windows) y tenerlo a buen resguardo por lo pronto. En seguida hay que ejecutar este otro comando en la consola de _RStudio_\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\n\nSi es la primeta vez que registras un **token** te pedirá que lo registres, dale _paste_ (**ctrl-v** en Windows). Si ya tienes un registro dado de alta, te informará sobre lo que tiene anotado y te dará oprotunidad de decidir qué quieres hacer en seguida.\n. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n\n\n::: {layout=\"[2,1]\"}\nUna vez teminada esta tarea puedes ir a la pestaña **git** cuando lo consideres conveniente y ordenar a **RStudio** que envié todos los **commits** que están pendientes hasta el momento a **Github**. Para hacerlo deberás apretar el botón **Push**. Antes de hacerlo siempre es conveniente pedirle a **git** que se ponga al día con lo que ya está registrado en la _nube_, esto lo logras con el botón **pull**.  Esto nos lleva a una rutina de operación con **git** que se resume en la figura siguiente.\n\n\n![](images/En caso de incendio.png){width=150px}\n\n:::\n\n## Asociar Github con Netlify para publicar tu Blog\n\nHay que preparar a _Github_ dando acceso a _Netlify_ para que tome lo necesario. La meta es que construya un sitio Web con tu contenido y lo publique en Internet. Los pasos que hay que seguir para esta primera interacción son los siguiente.\n\n\nIniciar la vinculación con Github seleccionando la opción que ofrece importar los documentos desde un _repo_ Git. Esto dará la opción de utilizar _Github_ como origen de datos, entre otras posibilidades.\n\n![](images/Netlify-1.png)\n\nEl Siguiente paso es autorizar a Netlify a acceder a Github a través de tu cuenta, así como los específicos del repositorio que te interesa vincular. Esto también implica instalar una **aplicación** de vínculo entre _Netlify_ y _Github_ dentro de tu cuenta.   \n\n![](images/Netlify-2.png)\n\nSi todo ocurrió sin problemas, tendrás ahora en _Github_, en el menú de aplicaciones (Avatar&rarr; Settings&rarr; Applications), un botón que te permitirá configurar el vínculo con _Netlify_ según tus requerimientos. También podrás ver los _repos_ que hayas autorizado desde _Netlify_.\n\n## Creación de un nuevo sitio a publicar\n\n1. **En Netlify**:\n\n   + Desde la opción _team_ o _site_ puedes generar un nuevo sitio.\n   \n::: {layout=\"[1,1]\"}\n   ![](images/Netlify-new-site.png)\n   \n   ![](images/Netlify-new-site-team.png)\n:::   \n\nCuando aprietas el boton de _añadir sitio_, aparecerá una nueva pantalla que tiene tres secciones. Se trata de los atributos que tendrás que proporcionar para darle presencia en Internet a tu proyecto y algunos otros atributos que definen como se producirá y actualizará continuamente. Estas operaciones es poco probable que las vuelvas a ver, una vez que tu proyecto esté en producción, aunque desde luego estarán siempre ahí por si deseas hacer ajustes.  \n\n\n#### ¿Qué nombre le daras?\n\nDeberás elegir un nombre que se convertirá en una URL para acceder a tu proyecto. Puede ser cualquier cosa que desees, pero debe ser único. En esta sección puedes escribir nombres y verificar que estén disponibles\n\n![](images/Netlify-config-site-1.png){width=50%}\n\n#### ¿Qué hará Netlify para operar tu sitio?\n\nEs una colección de atributos para indicarle a _Netlify_ dónde conseguir los documentos y como manejarlos. En nuestro caso, muy simple, básicamente hay que decirle en donde están los documentos que _Quarto_, con ayuda de _pandoc_, ha _renderizado_. Si no has cambiado nada en `_quarto.yml` la rama que estamos usando aquí para que _Git_ los registre es **main** y, en ella el directorio de producción se llama **_site**. Por favor verifica el contenido de esto para ayudarte a comprender mejor lo que estás haciendo.\n\n![](images/Netlify-config-site-2.png){width=50%}\n\n#### ¿Todo listo? ¡a producción!\n\nEn nuestro caso no hay más que hacer, _Netlify_ tiene información suficiente para encargarse de publicar tu proyecto continuamente. Incorporará los cambios que hagas en _RStudio_ en la rama principal. Lo hará automáticamente cada vez que envíes tus cambios a _Github_. \n\n![](images/Netlify-config-site-3.png){width=50%}\n\nSi todo salió bien, en este momento ya debe estar tu proyecto publicado y accesible para cualquier lector del mundo que lo localice y se interese en su contenido. \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}