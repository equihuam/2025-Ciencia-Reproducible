{
  "hash": "d98e28dff629baafe5d15fb7436fda99",
  "result": {
    "engine": "knitr",
    "markdown": "## Preparar Linux y PostgreSQL en tu m√°quina Windows\n\n### WSL\nAhora Windows incluye la opci√≥n de habilitar una versi√≥n de linux virtual que convive con el ambiente Windows, la caracter√≠stica que denomina [*Windows Subsystem Linux* (**WSL**)](https://learn.microsoft.com/es-mx/windows/wsl/). Hay que habilitarlo desde el panel de control como *caracter√≠sticas de Windows* como se ilustra en la @fig-wsl, o mediante comandos desde una ventana de **Powershell** (ü™ü + X; y luego I).\n\n\n```bash\nwsl --install\nwsl --version\nwsl --install -d ubuntu\n```\n\\ \n\nHabr√° ahora un √≠cono con el ping√ºino de Linux en tu equipo, que es un enlace a una ventana de terminal directamente asociada con **WSL**. M√°s adelante ser√° una forma de acceso conveniente, pero por lo pronto puedes seguir con la que ya tienes de **Powershell**.\n\n### PostgreSQL\n\nUna vez activado **WSL**, tendr√°s, en este ejemplo, un *linux Ubuntu* en marcha. Ahora puedes instalar _PostgreSQL_ en esa m√°quina virtual. Lo primero es acceder a _linux_ mediante una consola de sistema. Bastar√° con que escribas `wsl` en **Powershell**. Puede ser la misma ventana que usaste para instalar todo, si todav√≠a la tienes abierta, o usar el nuevo √≠cono del ping√ºino. Ahora, escribe las siguientes instrucciones en _linux_. B√°sicamente le estas diciendo que entre en modo de _superusuario_ (`sudo`) y que vaya al servicio general de almacenamiento de aplicaciones (`apt-get`) y conseguir lo necesario para instalar _PostgreSQL_ en la versi√≥n que incluye extensiones y adiciones comunes al _PostgreSQL_ b√°sico.\n\n\n``` bash\nsudo apt-get install postgresql postgresql-contrib\n```\n\nLa instalaci√≥n inicial de *PostgreSQL* utiliza como usuario de arranque a `postgres`. Es necesario darle un *password* para lograr que *PostgreSQL* nos de acceso. El siguiente comando lo hace. Te generar√° una l√≠nea en la que te pide ingreses la nueva clave que quieres darle al usuario `postgres`. Escribiras pero no ver√°s lo que escribes, por seguiridad obviamente. Al terminar aprieta la tecla **enter/intro&#9166;**\n\n``` bash\nsudo passwd postgres\n```\n\n\n\nsudo -u postgres psql\n\nsudo -u postgres createuser <username>\n\nsudo -u postgres createdb <dbname>\n\n$ sudo -u postgres psql\npsql=# alter user <username> with encrypted password '<password>';\ngrant all privileges on database <dbname> to <username> ; \n```\n\nPara iniciar tu interacci√≥n con *PostgreSQL* incialmente necesitar√° entrar a la interfaz del sistema con el siguiente comando.\n\n``` bash\n\nsudo -u postgres psql\n\nsudo -u postgres createuser <username>\n\nsudo -u postgres createdb <dbname>\n\n$ sudo -u postgres psql\npsql=# alter user <username> with encrypted password '<password>';\ngrant all privileges on database <dbname> to <username> ; \n```\n\nUna vez que todo ha sido configurado podr√°s tener acceso a PostgreSQL yhacer operaciones de todo tipo. A continuaci√≥n un ejemplo muy sencillo con la bae de datos de ejemplo \"dbdrental\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(RPostgres, keyring)\n\n\ntryCatch({\n  drv <- Postgres()\n  print(\"Connecting to Database‚Ä¶\")\n  connec <- dbConnect(drv, \n                      dbname   = \"dvdrental\",\n                      host     = Sys.getenv(\"psql_eq_ip\"), \n                      port     = Sys.getenv(\"psql_eq_port\"),\n                      user     = key_list(\"psql-eq\")[1,2],\n                      password = key_get(service = \"psql-eq\", \n                                         username = key_list(\"psql-eq\")[1,2]))\n  \n  print(\"Database Connected!\")\n},\nerror=function(cond) {\n  print(cond)\n  print(\"Unable to connect to Database.\")\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Connecting to Database‚Ä¶\"\n[1] \"Database Connected!\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndf <- dbGetQuery(connec, \"SELECT first_name, last_name FROM actor\")\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  first_name    last_name\n1   Penelope      Guiness\n2       Nick     Wahlberg\n3         Ed        Chase\n4   Jennifer        Davis\n5     Johnny Lollobrigida\n6      Bette    Nicholson\n```\n\n\n:::\n\n```{.r .cell-code}\ndbDisconnect(connec)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}