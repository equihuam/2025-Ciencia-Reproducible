{
  "hash": "1b23d4011b9ecf56726dd26b92a17b6a",
  "result": {
    "engine": "knitr",
    "markdown": "## Preparar Linux y PostgreSQL en tu m√°quina Windows\n\n### WSL\nAhora Windows incluye la opci√≥n de habilitar una versi√≥n de linux virtual que convive con el ambiente Windows, la caracter√≠stica que denomina [*Windows Subsystem Linux* (**WSL**)](https://learn.microsoft.com/es-mx/windows/wsl/). Hay que habilitarlo desde el panel de control como *caracter√≠sticas de Windows* como se ilustra en la @fig-wsl, o mediante comandos desde una ventana de **Powershell** (ü™ü + X; y luego I).\n\n\n```bash\nwsl --install\nwsl --version\nwsl --install -d ubuntu\n```\n\\ \n\nHabr√° ahora un √≠cono con el ping√ºino de Linux en tu equipo, que es un enlace a una ventana de terminal directamente asociada con **WSL**. M√°s adelante ser√° una forma de acceso conveniente, pero por lo pronto puedes seguir con la que ya tienes de **Powershell**.\n\n### PostgreSQL\n\nUna vez activado **WSL**, tendr√°s, en este ejemplo, un *linux Ubuntu* en marcha. Ahora puedes instalar _PostgreSQL_ en esa m√°quina virtual. Lo primero es acceder a _linux_ mediante una consola de sistema. Bastar√° con que escribas `wsl` en **Powershell**. Puede ser la misma ventana que usaste para instalar todo, si todav√≠a la tienes abierta, o usar el nuevo √≠cono del ping√ºino. Ahora, escribe las siguientes instrucciones en _linux_. B√°sicamente le estas diciendo que entre en modo de _superusuario_ (`sudo`) y que vaya al servicio general de almacenamiento de aplicaciones (`apt-get`) y conseguir lo necesario para instalar _PostgreSQL_ en la versi√≥n que incluye extensiones y adiciones comunes al _PostgreSQL_ b√°sico.\n\n\n``` bash\nsudo apt-get install postgresql postgresql-contrib\n```\n\nLa instalaci√≥n inicial de *PostgreSQL* utiliza como usuario de arranque a `postgres`. Es necesario darle un *password* para lograr que *PostgreSQL* nos de acceso. El siguiente comando lo hace. Te generar√° una l√≠nea en la que te pide ingreses la nueva clave que quieras darle al usuario `postgres`. Escribiras pero no ver√°s lo que escribes, por seguiridad obviamente. Al terminar aprieta la tecla **enter/intro/&#9166;**\n\n``` bash\nsudo passwd postgres\n```\n\nAhora, desde la misma terminal, tenemos que arrancar a _posgtreSQL_  como un servico activo en el equipo. Esto lo mantendr√° en operaci√≥n hasta que reinicies la m√°quina, en cuyo caso deber√°s reiniciar el servicio.\nLa instrucci√≥n para hacer esta operaci√≥n es la siguiente.\n\n\n``` bash\n sudo service postgresql start\n```\n\nEsta mismal√≠nea te sirve para detener el servico (stop en lugar de start), reiniciarlo (restart) o para averiguar si est√° activo (status).\n\nConviene generar un usuario de tu preferencia para interactuar con _PostgreSQL_, evitando dejar como vulnerabilidad la interacci√≥n atrav√©s del usuario com√∫n `postgres`. Para crear ese nuevo usuario usa el siguiente comando.\n\n``` bash\nsudo -u postgres psql\n\npsql=# alter user <username> with encrypted password '<password>';\ngrant all privileges on database <dbname> to <username> ; \n```\n\nPara iniciar tu interacci√≥n con *PostgreSQL* incialmente necesitar√° entrar a la interfaz del sistema con el siguiente comando. Puede ser que te presente alguna advertencia, pero por lo pronto no le hagas caso.\n\n``` bash\nsudo -u postgres createuser <username>\n```\n\nPara seguir con el ejercicio necesitamos crear una base de datos nueva. Eneste caso usaremos datos de ejemplo. Veamos la base de datos de los pasajeros del Titanic en su tr√°gico viaje inaugural. Lo primero es preparar a _PostgreSQL_ para alojarla.\n\n\n``` bash\nsudo -u postgres createdb titanic\n```\n\nAhora vamos por la base de datos. En _linux_ existe para este fin el comando `wget`. Conviene preparar un directorio para poner estos datos de ejemplo. Un lugar posible podr√≠a ser dentro de tu directorio\n**home**, (asocido al s√≠mbolo **) quiz√°s en _db-ejemplos_. Hay que usra `wget` con la opci√≥n **-P** seguida de la ruta deeada para almaenar el xontenido de la URL. Si los directorios involucrados existen, los usa, si no, los crea.\n\n\n``` bash\nwget https://raw.githubusercontent.com/neondatabase/postgres-sample-dbs/main/titanic.sql -P ~/db-ejemplos\n```\n\nAhora hay que cargar los datos en la base de datos `titanic`. El comando para esto es\n\n\n``` bash\npsql -d titanic -f ~/db-ejemplos/titanic.sql\n```\n\nSi por falta de derechos de acceso en tu linux, falla algo de lo anterior, esta es la manera de darle todos los derechos ak usuario. No siempre una buena idea dezde el punto de vista de la seguridad. Lo primero es entrar a la consola de _PostgreSQL_ como un usuario administrativo, es decir `postgres`, por ejemplo. Nota el cambio en el encabezado de l√≠nea en tu terminal\n\n``` bash\nsudo -u postgres psql\n```\n\nAhora ya estas dentro de _PostgreSQL_ los comandos en su lenguaje, _SQL_, son los siguientes. Nota tambi√©n que cada comando es terminado con \";\", si no lo incluyes el interprete de _SQL_ considera que no has terminado de construir la instrucci√≥n y por tanto no la procesa.\n\n``` sql\nalter user <username> with encrypted password '<password>';\ngrant all privileges on database <dbname> to <username> ; \n```\n\nUna vez que todo ha sido configurado podr√°s tener acceso a PostgreSQL y hacer operaciones de todo tipo. A continuaci√≥n un ejemplo muy sencillo con la bae de datos de ejemplo \"titanic\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(RPostgres, keyring)\n\n\ntryCatch({\n  drv <- Postgres()\n  print(\"Connecting to Database‚Ä¶\")\n  connec <- dbConnect(drv, \n                      dbname   = \"titanic\",\n                      host     = Sys.getenv(\"psql_eq_ip\"), \n                      port     = Sys.getenv(\"psql_eq_port\"),\n                      user     = key_list(\"psql-eq\")[1,2],\n                      password = key_get(service = \"psql-eq\", \n                                         username = key_list(\"psql-eq\")[1,2]))\n  \n  print(\"Database Connected!\")\n},\nerror=function(cond) {\n  print(cond)\n  print(\"Unable to connect to Database.\")\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Connecting to Database‚Ä¶\"\n[1] \"Database Connected!\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndf <- dbGetQuery(connec, \"SELECT name, hometown FROM passenger;\")\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                 name\n1                             Braund, Mr. Owen Harris\n2 Cumings, Mrs. John Bradley (Florence Briggs Thayer)\n3                              Heikkinen, Miss. Laina\n4        Futrelle, Mrs. Jacques Heath (Lily May Peel)\n5                            Allen, Mr. William Henry\n6                                    Moran, Mr. James\n                            hometown\n1         Bridgerule, Devon, England\n2             New York, New York, US\n3                 Jyv√§skyl√§, Finland\n4        Scituate, Massachusetts, US\n5 Birmingham, West Midlands, England\n6                      Cork, Ireland\n```\n\n\n:::\n\n```{.r .cell-code}\ndbDisconnect(connec)\n```\n:::\n\n\n\n\n\\ \n¬øHab√≠a alg√∫n mexicano en el Titanic?\n\\ \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[grepl(\"mexico\", df$hometown, ignore.case =\"True\"),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        name                    hometown\n31  Uruchurtu, Don. Manuel E         Mexico City, Mexico\n222     Bracken, Mr. James H Lake Arthur, New Mexico, US\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}